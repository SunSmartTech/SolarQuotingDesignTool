/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssignedSiteInspector } from "./AssignedSiteInspector";
import { AssignedSiteInspectorCountArgs } from "./AssignedSiteInspectorCountArgs";
import { AssignedSiteInspectorFindManyArgs } from "./AssignedSiteInspectorFindManyArgs";
import { AssignedSiteInspectorFindUniqueArgs } from "./AssignedSiteInspectorFindUniqueArgs";
import { CreateAssignedSiteInspectorArgs } from "./CreateAssignedSiteInspectorArgs";
import { UpdateAssignedSiteInspectorArgs } from "./UpdateAssignedSiteInspectorArgs";
import { DeleteAssignedSiteInspectorArgs } from "./DeleteAssignedSiteInspectorArgs";
import { AssignedSiteInspectorService } from "../assignedSiteInspector.service";
@graphql.Resolver(() => AssignedSiteInspector)
export class AssignedSiteInspectorResolverBase {
  constructor(protected readonly service: AssignedSiteInspectorService) {}

  async _assignedSiteInspectorsMeta(
    @graphql.Args() args: AssignedSiteInspectorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssignedSiteInspector])
  async assignedSiteInspectors(
    @graphql.Args() args: AssignedSiteInspectorFindManyArgs
  ): Promise<AssignedSiteInspector[]> {
    return this.service.assignedSiteInspectors(args);
  }

  @graphql.Query(() => AssignedSiteInspector, { nullable: true })
  async assignedSiteInspector(
    @graphql.Args() args: AssignedSiteInspectorFindUniqueArgs
  ): Promise<AssignedSiteInspector | null> {
    const result = await this.service.assignedSiteInspector(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssignedSiteInspector)
  async createAssignedSiteInspector(
    @graphql.Args() args: CreateAssignedSiteInspectorArgs
  ): Promise<AssignedSiteInspector> {
    return await this.service.createAssignedSiteInspector({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AssignedSiteInspector)
  async updateAssignedSiteInspector(
    @graphql.Args() args: UpdateAssignedSiteInspectorArgs
  ): Promise<AssignedSiteInspector | null> {
    try {
      return await this.service.updateAssignedSiteInspector({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssignedSiteInspector)
  async deleteAssignedSiteInspector(
    @graphql.Args() args: DeleteAssignedSiteInspectorArgs
  ): Promise<AssignedSiteInspector | null> {
    try {
      return await this.service.deleteAssignedSiteInspector(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
