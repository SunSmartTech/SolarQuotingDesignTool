/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DesignSetting } from "./DesignSetting";
import { DesignSettingCountArgs } from "./DesignSettingCountArgs";
import { DesignSettingFindManyArgs } from "./DesignSettingFindManyArgs";
import { DesignSettingFindUniqueArgs } from "./DesignSettingFindUniqueArgs";
import { DeleteDesignSettingArgs } from "./DeleteDesignSettingArgs";
import { DesignSettingService } from "../designSetting.service";
@graphql.Resolver(() => DesignSetting)
export class DesignSettingResolverBase {
  constructor(protected readonly service: DesignSettingService) {}

  async _designSettingsMeta(
    @graphql.Args() args: DesignSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DesignSetting])
  async designSettings(
    @graphql.Args() args: DesignSettingFindManyArgs
  ): Promise<DesignSetting[]> {
    return this.service.designSettings(args);
  }

  @graphql.Query(() => DesignSetting, { nullable: true })
  async designSetting(
    @graphql.Args() args: DesignSettingFindUniqueArgs
  ): Promise<DesignSetting | null> {
    const result = await this.service.designSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DesignSetting)
  async deleteDesignSetting(
    @graphql.Args() args: DeleteDesignSettingArgs
  ): Promise<DesignSetting | null> {
    try {
      return await this.service.deleteDesignSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
