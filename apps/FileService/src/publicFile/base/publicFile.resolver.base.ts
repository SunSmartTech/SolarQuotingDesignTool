/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PublicFile } from "./PublicFile";
import { PublicFileCountArgs } from "./PublicFileCountArgs";
import { PublicFileFindManyArgs } from "./PublicFileFindManyArgs";
import { PublicFileFindUniqueArgs } from "./PublicFileFindUniqueArgs";
import { DeletePublicFileArgs } from "./DeletePublicFileArgs";
import { PublicFileService } from "../publicFile.service";
@graphql.Resolver(() => PublicFile)
export class PublicFileResolverBase {
  constructor(protected readonly service: PublicFileService) {}

  async _publicFilesMeta(
    @graphql.Args() args: PublicFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PublicFile])
  async publicFiles(
    @graphql.Args() args: PublicFileFindManyArgs
  ): Promise<PublicFile[]> {
    return this.service.publicFiles(args);
  }

  @graphql.Query(() => PublicFile, { nullable: true })
  async publicFile(
    @graphql.Args() args: PublicFileFindUniqueArgs
  ): Promise<PublicFile | null> {
    const result = await this.service.publicFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PublicFile)
  async deletePublicFile(
    @graphql.Args() args: DeletePublicFileArgs
  ): Promise<PublicFile | null> {
    try {
      return await this.service.deletePublicFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
