/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PublicFile as PrismaPublicFile } from "@prisma/client";

export class PublicFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PublicFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.publicFile.count(args);
  }

  async publicFiles<T extends Prisma.PublicFileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicFileFindManyArgs>
  ): Promise<PrismaPublicFile[]> {
    return this.prisma.publicFile.findMany<Prisma.PublicFileFindManyArgs>(args);
  }
  async publicFile<T extends Prisma.PublicFileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicFileFindUniqueArgs>
  ): Promise<PrismaPublicFile | null> {
    return this.prisma.publicFile.findUnique(args);
  }
  async createPublicFile<T extends Prisma.PublicFileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicFileCreateArgs>
  ): Promise<PrismaPublicFile> {
    return this.prisma.publicFile.create<T>(args);
  }
  async updatePublicFile<T extends Prisma.PublicFileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicFileUpdateArgs>
  ): Promise<PrismaPublicFile> {
    return this.prisma.publicFile.update<T>(args);
  }
  async deletePublicFile<T extends Prisma.PublicFileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PublicFileDeleteArgs>
  ): Promise<PrismaPublicFile> {
    return this.prisma.publicFile.delete(args);
  }
}
