/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LeadCaptureForm } from "./LeadCaptureForm";
import { LeadCaptureFormCountArgs } from "./LeadCaptureFormCountArgs";
import { LeadCaptureFormFindManyArgs } from "./LeadCaptureFormFindManyArgs";
import { LeadCaptureFormFindUniqueArgs } from "./LeadCaptureFormFindUniqueArgs";
import { DeleteLeadCaptureFormArgs } from "./DeleteLeadCaptureFormArgs";
import { LeadCaptureFormService } from "../leadCaptureForm.service";
@graphql.Resolver(() => LeadCaptureForm)
export class LeadCaptureFormResolverBase {
  constructor(protected readonly service: LeadCaptureFormService) {}

  async _leadCaptureFormsMeta(
    @graphql.Args() args: LeadCaptureFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LeadCaptureForm])
  async leadCaptureForms(
    @graphql.Args() args: LeadCaptureFormFindManyArgs
  ): Promise<LeadCaptureForm[]> {
    return this.service.leadCaptureForms(args);
  }

  @graphql.Query(() => LeadCaptureForm, { nullable: true })
  async leadCaptureForm(
    @graphql.Args() args: LeadCaptureFormFindUniqueArgs
  ): Promise<LeadCaptureForm | null> {
    const result = await this.service.leadCaptureForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LeadCaptureForm)
  async deleteLeadCaptureForm(
    @graphql.Args() args: DeleteLeadCaptureFormArgs
  ): Promise<LeadCaptureForm | null> {
    try {
      return await this.service.deleteLeadCaptureForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
