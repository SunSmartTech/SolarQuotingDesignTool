/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LeadCaptureForm as PrismaLeadCaptureForm,
} from "@prisma/client";

export class LeadCaptureFormServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadCaptureFormCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadCaptureForm.count(args);
  }

  async leadCaptureForms<T extends Prisma.LeadCaptureFormFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCaptureFormFindManyArgs>
  ): Promise<PrismaLeadCaptureForm[]> {
    return this.prisma.leadCaptureForm.findMany<Prisma.LeadCaptureFormFindManyArgs>(
      args
    );
  }
  async leadCaptureForm<T extends Prisma.LeadCaptureFormFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCaptureFormFindUniqueArgs>
  ): Promise<PrismaLeadCaptureForm | null> {
    return this.prisma.leadCaptureForm.findUnique(args);
  }
  async createLeadCaptureForm<T extends Prisma.LeadCaptureFormCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCaptureFormCreateArgs>
  ): Promise<PrismaLeadCaptureForm> {
    return this.prisma.leadCaptureForm.create<T>(args);
  }
  async updateLeadCaptureForm<T extends Prisma.LeadCaptureFormUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCaptureFormUpdateArgs>
  ): Promise<PrismaLeadCaptureForm> {
    return this.prisma.leadCaptureForm.update<T>(args);
  }
  async deleteLeadCaptureForm<T extends Prisma.LeadCaptureFormDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadCaptureFormDeleteArgs>
  ): Promise<PrismaLeadCaptureForm> {
    return this.prisma.leadCaptureForm.delete(args);
  }
}
