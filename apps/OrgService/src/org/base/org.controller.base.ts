/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OrgService } from "../org.service";
import { OrgCreateInput } from "./OrgCreateInput";
import { Org } from "./Org";
import { OrgFindManyArgs } from "./OrgFindManyArgs";
import { OrgWhereUniqueInput } from "./OrgWhereUniqueInput";
import { OrgUpdateInput } from "./OrgUpdateInput";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { ProjectWhereUniqueInput } from "../../project/base/ProjectWhereUniqueInput";

export class OrgControllerBase {
  constructor(protected readonly service: OrgService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Org })
  async createOrg(@common.Body() data: OrgCreateInput): Promise<Org> {
    return await this.service.createOrg({
      data: data,
      select: {
        createdAt: true,
        customerData: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Org] })
  @ApiNestedQuery(OrgFindManyArgs)
  async orgs(@common.Req() request: Request): Promise<Org[]> {
    const args = plainToClass(OrgFindManyArgs, request.query);
    return this.service.orgs({
      ...args,
      select: {
        createdAt: true,
        customerData: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Org })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async org(@common.Param() params: OrgWhereUniqueInput): Promise<Org | null> {
    const result = await this.service.org({
      where: params,
      select: {
        createdAt: true,
        customerData: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Org })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOrg(
    @common.Param() params: OrgWhereUniqueInput,
    @common.Body() data: OrgUpdateInput
  ): Promise<Org | null> {
    try {
      return await this.service.updateOrg({
        where: params,
        data: data,
        select: {
          createdAt: true,
          customerData: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Org })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOrg(
    @common.Param() params: OrgWhereUniqueInput
  ): Promise<Org | null> {
    try {
      return await this.service.deleteOrg({
        where: params,
        select: {
          createdAt: true,
          customerData: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/projects")
  @ApiNestedQuery(ProjectFindManyArgs)
  async findProjects(
    @common.Req() request: Request,
    @common.Param() params: OrgWhereUniqueInput
  ): Promise<Project[]> {
    const query = plainToClass(ProjectFindManyArgs, request.query);
    const results = await this.service.findProjects(params.id, {
      ...query,
      select: {
        createdAt: true,
        description: true,
        id: true,

        org: {
          select: {
            id: true,
          },
        },

        projectName: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projects")
  async connectProjects(
    @common.Param() params: OrgWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        connect: body,
      },
    };
    await this.service.updateOrg({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projects")
  async updateProjects(
    @common.Param() params: OrgWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        set: body,
      },
    };
    await this.service.updateOrg({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projects")
  async disconnectProjects(
    @common.Param() params: OrgWhereUniqueInput,
    @common.Body() body: ProjectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projects: {
        disconnect: body,
      },
    };
    await this.service.updateOrg({
      where: params,
      data,
      select: { id: true },
    });
  }
}
