/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, OrgSetting as PrismaOrgSetting } from "@prisma/client";

export class OrgSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrgSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orgSetting.count(args);
  }

  async orgSettings<T extends Prisma.OrgSettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgSettingFindManyArgs>
  ): Promise<PrismaOrgSetting[]> {
    return this.prisma.orgSetting.findMany<Prisma.OrgSettingFindManyArgs>(args);
  }
  async orgSetting<T extends Prisma.OrgSettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgSettingFindUniqueArgs>
  ): Promise<PrismaOrgSetting | null> {
    return this.prisma.orgSetting.findUnique(args);
  }
  async createOrgSetting<T extends Prisma.OrgSettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgSettingCreateArgs>
  ): Promise<PrismaOrgSetting> {
    return this.prisma.orgSetting.create<T>(args);
  }
  async updateOrgSetting<T extends Prisma.OrgSettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgSettingUpdateArgs>
  ): Promise<PrismaOrgSetting> {
    return this.prisma.orgSetting.update<T>(args);
  }
  async deleteOrgSetting<T extends Prisma.OrgSettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgSettingDeleteArgs>
  ): Promise<PrismaOrgSetting> {
    return this.prisma.orgSetting.delete(args);
  }
}
