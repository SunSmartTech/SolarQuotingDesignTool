/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SetbackService } from "../setback.service";
import { SetbackCreateInput } from "./SetbackCreateInput";
import { Setback } from "./Setback";
import { SetbackFindManyArgs } from "./SetbackFindManyArgs";
import { SetbackWhereUniqueInput } from "./SetbackWhereUniqueInput";
import { SetbackUpdateInput } from "./SetbackUpdateInput";

export class SetbackControllerBase {
  constructor(protected readonly service: SetbackService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Setback })
  async createSetback(
    @common.Body() data: SetbackCreateInput
  ): Promise<Setback> {
    return await this.service.createSetback({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Setback] })
  @ApiNestedQuery(SetbackFindManyArgs)
  async setbacks(@common.Req() request: Request): Promise<Setback[]> {
    const args = plainToClass(SetbackFindManyArgs, request.query);
    return this.service.setbacks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Setback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async setback(
    @common.Param() params: SetbackWhereUniqueInput
  ): Promise<Setback | null> {
    const result = await this.service.setback({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Setback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSetback(
    @common.Param() params: SetbackWhereUniqueInput,
    @common.Body() data: SetbackUpdateInput
  ): Promise<Setback | null> {
    try {
      return await this.service.updateSetback({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Setback })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSetback(
    @common.Param() params: SetbackWhereUniqueInput
  ): Promise<Setback | null> {
    try {
      return await this.service.deleteSetback({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
