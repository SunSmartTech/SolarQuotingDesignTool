/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Setback as PrismaSetback } from "@prisma/client";

export class SetbackServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SetbackCountArgs, "select">): Promise<number> {
    return this.prisma.setback.count(args);
  }

  async setbacks<T extends Prisma.SetbackFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetbackFindManyArgs>
  ): Promise<PrismaSetback[]> {
    return this.prisma.setback.findMany<Prisma.SetbackFindManyArgs>(args);
  }
  async setback<T extends Prisma.SetbackFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetbackFindUniqueArgs>
  ): Promise<PrismaSetback | null> {
    return this.prisma.setback.findUnique(args);
  }
  async createSetback<T extends Prisma.SetbackCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetbackCreateArgs>
  ): Promise<PrismaSetback> {
    return this.prisma.setback.create<T>(args);
  }
  async updateSetback<T extends Prisma.SetbackUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetbackUpdateArgs>
  ): Promise<PrismaSetback> {
    return this.prisma.setback.update<T>(args);
  }
  async deleteSetback<T extends Prisma.SetbackDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SetbackDeleteArgs>
  ): Promise<PrismaSetback> {
    return this.prisma.setback.delete(args);
  }
}
