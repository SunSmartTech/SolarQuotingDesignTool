/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AssignedContact } from "./AssignedContact";
import { AssignedContactCountArgs } from "./AssignedContactCountArgs";
import { AssignedContactFindManyArgs } from "./AssignedContactFindManyArgs";
import { AssignedContactFindUniqueArgs } from "./AssignedContactFindUniqueArgs";
import { CreateAssignedContactArgs } from "./CreateAssignedContactArgs";
import { UpdateAssignedContactArgs } from "./UpdateAssignedContactArgs";
import { DeleteAssignedContactArgs } from "./DeleteAssignedContactArgs";
import { Contact } from "../../contact/base/Contact";
import { AssignedContactService } from "../assignedContact.service";
@graphql.Resolver(() => AssignedContact)
export class AssignedContactResolverBase {
  constructor(protected readonly service: AssignedContactService) {}

  async _assignedContactsMeta(
    @graphql.Args() args: AssignedContactCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AssignedContact])
  async assignedContacts(
    @graphql.Args() args: AssignedContactFindManyArgs
  ): Promise<AssignedContact[]> {
    return this.service.assignedContacts(args);
  }

  @graphql.Query(() => AssignedContact, { nullable: true })
  async assignedContact(
    @graphql.Args() args: AssignedContactFindUniqueArgs
  ): Promise<AssignedContact | null> {
    const result = await this.service.assignedContact(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AssignedContact)
  async createAssignedContact(
    @graphql.Args() args: CreateAssignedContactArgs
  ): Promise<AssignedContact> {
    return await this.service.createAssignedContact({
      ...args,
      data: {
        ...args.data,

        contact: args.data.contact
          ? {
              connect: args.data.contact,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AssignedContact)
  async updateAssignedContact(
    @graphql.Args() args: UpdateAssignedContactArgs
  ): Promise<AssignedContact | null> {
    try {
      return await this.service.updateAssignedContact({
        ...args,
        data: {
          ...args.data,

          contact: args.data.contact
            ? {
                connect: args.data.contact,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AssignedContact)
  async deleteAssignedContact(
    @graphql.Args() args: DeleteAssignedContactArgs
  ): Promise<AssignedContact | null> {
    try {
      return await this.service.deleteAssignedContact(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Contact, {
    nullable: true,
    name: "contact",
  })
  async getContact(
    @graphql.Parent() parent: AssignedContact
  ): Promise<Contact | null> {
    const result = await this.service.getContact(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
