/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AssignedContact as PrismaAssignedContact,
  Contact as PrismaContact,
} from "@prisma/client";

export class AssignedContactServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AssignedContactCountArgs, "select">
  ): Promise<number> {
    return this.prisma.assignedContact.count(args);
  }

  async assignedContacts<T extends Prisma.AssignedContactFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssignedContactFindManyArgs>
  ): Promise<PrismaAssignedContact[]> {
    return this.prisma.assignedContact.findMany<Prisma.AssignedContactFindManyArgs>(
      args
    );
  }
  async assignedContact<T extends Prisma.AssignedContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssignedContactFindUniqueArgs>
  ): Promise<PrismaAssignedContact | null> {
    return this.prisma.assignedContact.findUnique(args);
  }
  async createAssignedContact<T extends Prisma.AssignedContactCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssignedContactCreateArgs>
  ): Promise<PrismaAssignedContact> {
    return this.prisma.assignedContact.create<T>(args);
  }
  async updateAssignedContact<T extends Prisma.AssignedContactUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssignedContactUpdateArgs>
  ): Promise<PrismaAssignedContact> {
    return this.prisma.assignedContact.update<T>(args);
  }
  async deleteAssignedContact<T extends Prisma.AssignedContactDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AssignedContactDeleteArgs>
  ): Promise<PrismaAssignedContact> {
    return this.prisma.assignedContact.delete(args);
  }

  async getContact(parentId: string): Promise<PrismaContact | null> {
    return this.prisma.assignedContact
      .findUnique({
        where: { id: parentId },
      })
      .contact();
  }
}
