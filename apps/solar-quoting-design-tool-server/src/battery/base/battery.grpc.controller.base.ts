/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { BatteryService } from "../battery.service";
import { BatteryCreateInput } from "./BatteryCreateInput";
import { BatteryWhereInput } from "./BatteryWhereInput";
import { BatteryWhereUniqueInput } from "./BatteryWhereUniqueInput";
import { BatteryFindManyArgs } from "./BatteryFindManyArgs";
import { BatteryUpdateInput } from "./BatteryUpdateInput";
import { Battery } from "./Battery";

export class BatteryGrpcControllerBase {
  constructor(protected readonly service: BatteryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Battery })
  @GrpcMethod("BatteryService", "createBattery")
  async createBattery(
    @common.Body() data: BatteryCreateInput
  ): Promise<Battery> {
    return await this.service.createBattery({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Battery] })
  @ApiNestedQuery(BatteryFindManyArgs)
  @GrpcMethod("BatteryService", "batteries")
  async batteries(@common.Req() request: Request): Promise<Battery[]> {
    const args = plainToClass(BatteryFindManyArgs, request.query);
    return this.service.batteries({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Battery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BatteryService", "battery")
  async battery(
    @common.Param() params: BatteryWhereUniqueInput
  ): Promise<Battery | null> {
    const result = await this.service.battery({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Battery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BatteryService", "updateBattery")
  async updateBattery(
    @common.Param() params: BatteryWhereUniqueInput,
    @common.Body() data: BatteryUpdateInput
  ): Promise<Battery | null> {
    try {
      return await this.service.updateBattery({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Battery })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("BatteryService", "deleteBattery")
  async deleteBattery(
    @common.Param() params: BatteryWhereUniqueInput
  ): Promise<Battery | null> {
    try {
      return await this.service.deleteBattery({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
