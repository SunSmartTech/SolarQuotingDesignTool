/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Costing as PrismaCosting } from "@prisma/client";

export class CostingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CostingCountArgs, "select">): Promise<number> {
    return this.prisma.costing.count(args);
  }

  async costings<T extends Prisma.CostingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostingFindManyArgs>
  ): Promise<PrismaCosting[]> {
    return this.prisma.costing.findMany<Prisma.CostingFindManyArgs>(args);
  }
  async costing<T extends Prisma.CostingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostingFindUniqueArgs>
  ): Promise<PrismaCosting | null> {
    return this.prisma.costing.findUnique(args);
  }
  async createCosting<T extends Prisma.CostingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostingCreateArgs>
  ): Promise<PrismaCosting> {
    return this.prisma.costing.create<T>(args);
  }
  async updateCosting<T extends Prisma.CostingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostingUpdateArgs>
  ): Promise<PrismaCosting> {
    return this.prisma.costing.update<T>(args);
  }
  async deleteCosting<T extends Prisma.CostingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CostingDeleteArgs>
  ): Promise<PrismaCosting> {
    return this.prisma.costing.delete(args);
  }
}
