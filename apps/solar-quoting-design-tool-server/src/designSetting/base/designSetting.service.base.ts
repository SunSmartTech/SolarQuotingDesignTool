/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DesignSetting as PrismaDesignSetting } from "@prisma/client";

export class DesignSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DesignSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.designSetting.count(args);
  }

  async designSettings<T extends Prisma.DesignSettingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignSettingFindManyArgs>
  ): Promise<PrismaDesignSetting[]> {
    return this.prisma.designSetting.findMany<Prisma.DesignSettingFindManyArgs>(
      args
    );
  }
  async designSetting<T extends Prisma.DesignSettingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignSettingFindUniqueArgs>
  ): Promise<PrismaDesignSetting | null> {
    return this.prisma.designSetting.findUnique(args);
  }
  async createDesignSetting<T extends Prisma.DesignSettingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignSettingCreateArgs>
  ): Promise<PrismaDesignSetting> {
    return this.prisma.designSetting.create<T>(args);
  }
  async updateDesignSetting<T extends Prisma.DesignSettingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignSettingUpdateArgs>
  ): Promise<PrismaDesignSetting> {
    return this.prisma.designSetting.update<T>(args);
  }
  async deleteDesignSetting<T extends Prisma.DesignSettingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DesignSettingDeleteArgs>
  ): Promise<PrismaDesignSetting> {
    return this.prisma.designSetting.delete(args);
  }
}
