/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { InverterService } from "../inverter.service";
import { InverterCreateInput } from "./InverterCreateInput";
import { InverterWhereInput } from "./InverterWhereInput";
import { InverterWhereUniqueInput } from "./InverterWhereUniqueInput";
import { InverterFindManyArgs } from "./InverterFindManyArgs";
import { InverterUpdateInput } from "./InverterUpdateInput";
import { Inverter } from "./Inverter";

export class InverterGrpcControllerBase {
  constructor(protected readonly service: InverterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Inverter })
  @GrpcMethod("InverterService", "createInverter")
  async createInverter(
    @common.Body() data: InverterCreateInput
  ): Promise<Inverter> {
    return await this.service.createInverter({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Inverter] })
  @ApiNestedQuery(InverterFindManyArgs)
  @GrpcMethod("InverterService", "inverters")
  async inverters(@common.Req() request: Request): Promise<Inverter[]> {
    const args = plainToClass(InverterFindManyArgs, request.query);
    return this.service.inverters({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Inverter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InverterService", "inverter")
  async inverter(
    @common.Param() params: InverterWhereUniqueInput
  ): Promise<Inverter | null> {
    const result = await this.service.inverter({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Inverter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InverterService", "updateInverter")
  async updateInverter(
    @common.Param() params: InverterWhereUniqueInput,
    @common.Body() data: InverterUpdateInput
  ): Promise<Inverter | null> {
    try {
      return await this.service.updateInverter({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Inverter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InverterService", "deleteInverter")
  async deleteInverter(
    @common.Param() params: InverterWhereUniqueInput
  ): Promise<Inverter | null> {
    try {
      return await this.service.deleteInverter({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
