/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Inverter as PrismaInverter } from "@prisma/client";

export class InverterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.InverterCountArgs, "select">): Promise<number> {
    return this.prisma.inverter.count(args);
  }

  async inverters<T extends Prisma.InverterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InverterFindManyArgs>
  ): Promise<PrismaInverter[]> {
    return this.prisma.inverter.findMany<Prisma.InverterFindManyArgs>(args);
  }
  async inverter<T extends Prisma.InverterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InverterFindUniqueArgs>
  ): Promise<PrismaInverter | null> {
    return this.prisma.inverter.findUnique(args);
  }
  async createInverter<T extends Prisma.InverterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InverterCreateArgs>
  ): Promise<PrismaInverter> {
    return this.prisma.inverter.create<T>(args);
  }
  async updateInverter<T extends Prisma.InverterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InverterUpdateArgs>
  ): Promise<PrismaInverter> {
    return this.prisma.inverter.update<T>(args);
  }
  async deleteInverter<T extends Prisma.InverterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InverterDeleteArgs>
  ): Promise<PrismaInverter> {
    return this.prisma.inverter.delete(args);
  }
}
