/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Org } from "./Org";
import { OrgCountArgs } from "./OrgCountArgs";
import { OrgFindManyArgs } from "./OrgFindManyArgs";
import { OrgFindUniqueArgs } from "./OrgFindUniqueArgs";
import { CreateOrgArgs } from "./CreateOrgArgs";
import { UpdateOrgArgs } from "./UpdateOrgArgs";
import { DeleteOrgArgs } from "./DeleteOrgArgs";
import { ProjectFindManyArgs } from "../../project/base/ProjectFindManyArgs";
import { Project } from "../../project/base/Project";
import { OrgService } from "../org.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Org)
export class OrgResolverBase {
  constructor(
    protected readonly service: OrgService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "read",
    possession: "any",
  })
  async _orgsMeta(
    @graphql.Args() args: OrgCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Org])
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "read",
    possession: "any",
  })
  async orgs(@graphql.Args() args: OrgFindManyArgs): Promise<Org[]> {
    return this.service.orgs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Org, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "read",
    possession: "own",
  })
  async org(@graphql.Args() args: OrgFindUniqueArgs): Promise<Org | null> {
    const result = await this.service.org(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Org)
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "create",
    possession: "any",
  })
  async createOrg(@graphql.Args() args: CreateOrgArgs): Promise<Org> {
    return await this.service.createOrg({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Org)
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "update",
    possession: "any",
  })
  async updateOrg(@graphql.Args() args: UpdateOrgArgs): Promise<Org | null> {
    try {
      return await this.service.updateOrg({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Org)
  @nestAccessControl.UseRoles({
    resource: "Org",
    action: "delete",
    possession: "any",
  })
  async deleteOrg(@graphql.Args() args: DeleteOrgArgs): Promise<Org | null> {
    try {
      return await this.service.deleteOrg(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Project], { name: "projects" })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async findProjects(
    @graphql.Parent() parent: Org,
    @graphql.Args() args: ProjectFindManyArgs
  ): Promise<Project[]> {
    const results = await this.service.findProjects(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
