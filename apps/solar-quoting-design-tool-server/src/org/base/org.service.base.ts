/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Org as PrismaOrg,
  Project as PrismaProject,
} from "@prisma/client";

export class OrgServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OrgCountArgs, "select">): Promise<number> {
    return this.prisma.org.count(args);
  }

  async orgs<T extends Prisma.OrgFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgFindManyArgs>
  ): Promise<PrismaOrg[]> {
    return this.prisma.org.findMany<Prisma.OrgFindManyArgs>(args);
  }
  async org<T extends Prisma.OrgFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgFindUniqueArgs>
  ): Promise<PrismaOrg | null> {
    return this.prisma.org.findUnique(args);
  }
  async createOrg<T extends Prisma.OrgCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgCreateArgs>
  ): Promise<PrismaOrg> {
    return this.prisma.org.create<T>(args);
  }
  async updateOrg<T extends Prisma.OrgUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgUpdateArgs>
  ): Promise<PrismaOrg> {
    return this.prisma.org.update<T>(args);
  }
  async deleteOrg<T extends Prisma.OrgDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.OrgDeleteArgs>
  ): Promise<PrismaOrg> {
    return this.prisma.org.delete(args);
  }

  async findProjects(
    parentId: string,
    args: Prisma.ProjectFindManyArgs
  ): Promise<PrismaProject[]> {
    return this.prisma.org
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projects(args);
  }
}
