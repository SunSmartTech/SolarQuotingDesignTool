/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PricingScheme as PrismaPricingScheme } from "@prisma/client";

export class PricingSchemeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PricingSchemeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pricingScheme.count(args);
  }

  async pricingSchemes<T extends Prisma.PricingSchemeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingSchemeFindManyArgs>
  ): Promise<PrismaPricingScheme[]> {
    return this.prisma.pricingScheme.findMany<Prisma.PricingSchemeFindManyArgs>(
      args
    );
  }
  async pricingScheme<T extends Prisma.PricingSchemeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingSchemeFindUniqueArgs>
  ): Promise<PrismaPricingScheme | null> {
    return this.prisma.pricingScheme.findUnique(args);
  }
  async createPricingScheme<T extends Prisma.PricingSchemeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingSchemeCreateArgs>
  ): Promise<PrismaPricingScheme> {
    return this.prisma.pricingScheme.create<T>(args);
  }
  async updatePricingScheme<T extends Prisma.PricingSchemeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingSchemeUpdateArgs>
  ): Promise<PrismaPricingScheme> {
    return this.prisma.pricingScheme.update<T>(args);
  }
  async deletePricingScheme<T extends Prisma.PricingSchemeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PricingSchemeDeleteArgs>
  ): Promise<PrismaPricingScheme> {
    return this.prisma.pricingScheme.delete(args);
  }
}
