/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ProposedUtilityTariffService } from "../proposedUtilityTariff.service";
import { ProposedUtilityTariffCreateInput } from "./ProposedUtilityTariffCreateInput";
import { ProposedUtilityTariffWhereInput } from "./ProposedUtilityTariffWhereInput";
import { ProposedUtilityTariffWhereUniqueInput } from "./ProposedUtilityTariffWhereUniqueInput";
import { ProposedUtilityTariffFindManyArgs } from "./ProposedUtilityTariffFindManyArgs";
import { ProposedUtilityTariffUpdateInput } from "./ProposedUtilityTariffUpdateInput";
import { ProposedUtilityTariff } from "./ProposedUtilityTariff";

export class ProposedUtilityTariffGrpcControllerBase {
  constructor(protected readonly service: ProposedUtilityTariffService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProposedUtilityTariff })
  @GrpcMethod("ProposedUtilityTariffService", "createProposedUtilityTariff")
  async createProposedUtilityTariff(
    @common.Body() data: ProposedUtilityTariffCreateInput
  ): Promise<ProposedUtilityTariff> {
    return await this.service.createProposedUtilityTariff({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProposedUtilityTariff] })
  @ApiNestedQuery(ProposedUtilityTariffFindManyArgs)
  @GrpcMethod("ProposedUtilityTariffService", "proposedUtilityTariffs")
  async proposedUtilityTariffs(
    @common.Req() request: Request
  ): Promise<ProposedUtilityTariff[]> {
    const args = plainToClass(ProposedUtilityTariffFindManyArgs, request.query);
    return this.service.proposedUtilityTariffs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProposedUtilityTariff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProposedUtilityTariffService", "proposedUtilityTariff")
  async proposedUtilityTariff(
    @common.Param() params: ProposedUtilityTariffWhereUniqueInput
  ): Promise<ProposedUtilityTariff | null> {
    const result = await this.service.proposedUtilityTariff({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProposedUtilityTariff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProposedUtilityTariffService", "updateProposedUtilityTariff")
  async updateProposedUtilityTariff(
    @common.Param() params: ProposedUtilityTariffWhereUniqueInput,
    @common.Body() data: ProposedUtilityTariffUpdateInput
  ): Promise<ProposedUtilityTariff | null> {
    try {
      return await this.service.updateProposedUtilityTariff({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProposedUtilityTariff })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ProposedUtilityTariffService", "deleteProposedUtilityTariff")
  async deleteProposedUtilityTariff(
    @common.Param() params: ProposedUtilityTariffWhereUniqueInput
  ): Promise<ProposedUtilityTariff | null> {
    try {
      return await this.service.deleteProposedUtilityTariff({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
