/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { RoofTypeService } from "../roofType.service";
import { RoofTypeCreateInput } from "./RoofTypeCreateInput";
import { RoofTypeWhereInput } from "./RoofTypeWhereInput";
import { RoofTypeWhereUniqueInput } from "./RoofTypeWhereUniqueInput";
import { RoofTypeFindManyArgs } from "./RoofTypeFindManyArgs";
import { RoofTypeUpdateInput } from "./RoofTypeUpdateInput";
import { RoofType } from "./RoofType";

export class RoofTypeGrpcControllerBase {
  constructor(protected readonly service: RoofTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RoofType })
  @GrpcMethod("RoofTypeService", "createRoofType")
  async createRoofType(
    @common.Body() data: RoofTypeCreateInput
  ): Promise<RoofType> {
    return await this.service.createRoofType({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RoofType] })
  @ApiNestedQuery(RoofTypeFindManyArgs)
  @GrpcMethod("RoofTypeService", "roofTypes")
  async roofTypes(@common.Req() request: Request): Promise<RoofType[]> {
    const args = plainToClass(RoofTypeFindManyArgs, request.query);
    return this.service.roofTypes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RoofType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoofTypeService", "roofType")
  async roofType(
    @common.Param() params: RoofTypeWhereUniqueInput
  ): Promise<RoofType | null> {
    const result = await this.service.roofType({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RoofType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoofTypeService", "updateRoofType")
  async updateRoofType(
    @common.Param() params: RoofTypeWhereUniqueInput,
    @common.Body() data: RoofTypeUpdateInput
  ): Promise<RoofType | null> {
    try {
      return await this.service.updateRoofType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RoofType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("RoofTypeService", "deleteRoofType")
  async deleteRoofType(
    @common.Param() params: RoofTypeWhereUniqueInput
  ): Promise<RoofType | null> {
    try {
      return await this.service.deleteRoofType({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
