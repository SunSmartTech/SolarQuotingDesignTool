/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { RoofType } from "./RoofType";
import { RoofTypeCountArgs } from "./RoofTypeCountArgs";
import { RoofTypeFindManyArgs } from "./RoofTypeFindManyArgs";
import { RoofTypeFindUniqueArgs } from "./RoofTypeFindUniqueArgs";
import { DeleteRoofTypeArgs } from "./DeleteRoofTypeArgs";
import { RoofTypeService } from "../roofType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoofType)
export class RoofTypeResolverBase {
  constructor(
    protected readonly service: RoofTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoofType",
    action: "read",
    possession: "any",
  })
  async _roofTypesMeta(
    @graphql.Args() args: RoofTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoofType])
  @nestAccessControl.UseRoles({
    resource: "RoofType",
    action: "read",
    possession: "any",
  })
  async roofTypes(
    @graphql.Args() args: RoofTypeFindManyArgs
  ): Promise<RoofType[]> {
    return this.service.roofTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoofType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoofType",
    action: "read",
    possession: "own",
  })
  async roofType(
    @graphql.Args() args: RoofTypeFindUniqueArgs
  ): Promise<RoofType | null> {
    const result = await this.service.roofType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RoofType)
  @nestAccessControl.UseRoles({
    resource: "RoofType",
    action: "delete",
    possession: "any",
  })
  async deleteRoofType(
    @graphql.Args() args: DeleteRoofTypeArgs
  ): Promise<RoofType | null> {
    try {
      return await this.service.deleteRoofType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
